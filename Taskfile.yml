# https://taskfile.dev

version: "3"

vars:
  DEV_ARGS: -A --unstable
  PROD_ARGS: --allow-net=0.0.0.0,suggestqueries.google.com --allow-env --no-check
  GIT_BRANCH: master
  PORT: 8080

tasks:
  default:
    deps: [dev]
  dev:
    cmds:
      - deno run --watch {{.DEV_ARGS}} src/egonet.ts
  test:
    cmds:
      - deno test {{.DEV_ARGS}} src/egograph.test.ts
  lint:
    cmds:
      - deno lint --unstable ./src
      - deno fmt --check ./src 
  build:
    deps: [lint, test]
    cmds:
      - deno bundle src/egonet.ts dist/egonet.js
      - terser --compress --mangle --output dist/egonet.min.js -- dist/egonet.js
    sources:
      - ./src/*.ts
    generates:
      - ./dist/egonet.js
  prod:
    deps: [build]
    cmds:
      - deno run {{.PROD_ARGS}} dist/egonet.min.js
  compile-osx:
    deps: [build]
    cmds:
      - deno compile --unstable --lite {{.PROD_ARGS}} --target x86_64-apple-darwin --output dist/egonet-x86_64-apple-darwin dist/egonet.min.js
  compile-linux:
    deps: [build]
    cmds:
      - deno compile --unstable --lite {{.PROD_ARGS}} --target x86_64-unknown-linux-gnu --output dist/egonet-x86_64-unknown-linux-gnu dist/egonet.min.js
  deploy:
    deps: [clean, build]
    cmds:
      - fly deploy
  push:
    deps: [build]
    cmds:
      - git add .
      - read commitMessage && git commit -m "$commitMessage"
      - git push origin {{.GIT_BRANCH}}
  docker-build:
    deps: [build]
    cmds:
      - docker build -t egonet .
  docker-run:
    deps: [docker-build]
    cmds:
      - docker run -it --rm -p{{.PORT}}:{{.PORT}} egonet
  docker-kill:
    cmds:
      - docker kill $(docker ps | grep "egonet" | awk '{ print $1 }')
  curl-test:
    cmds:
      - curl -sX GET "http://localhost:{{.PORT}}/?q=apple" | jq -c
  clean:
    cmds:
      - rm dist/*